name: Validate Application Pipeline

on:
  push:
    branches:
      - main
  workflow_call:
    inputs:
      branch:
        description: "Branch to validate"
        required: true
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
        default: "Dockerfile"
      dockerhub_repo:
        description: "DockerHub repo name"
        required: true
        type: string
        default: "venkatalakshmi0448/nodejs-docker"
      deploy_env:
        description: "Deployment environment"
        required: true
        type: string
        default: "staging"

jobs:
  validate:
    runs-on: ubuntu-latest
    environment:
      name: "validate"

    strategy:
      matrix:
        step: ["checkout", "docker-login", "docker-build-push"]

    steps:
      # ‚úÖ Checkout step (Fixed branch issue)
      - name: Checkout code
        if: ${{ matrix.step == 'checkout' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch || 'main' }}  # Defaults to 'main' if branch input is missing
          fetch-depth: 0  # Ensures full repository is checked out
          submodules: true  # If your repo has submodules

      # ‚úÖ Verify Dockerfile exists
      - name: Verify Dockerfile exists
        if: ${{ matrix.step == 'docker-build-push' }}
        run: |
          if [ ! -f "${{ inputs.dockerfile }}" ]; then
            echo "‚ùå ERROR: Dockerfile not found at ${{ inputs.dockerfile }}"
            exit 1
          fi
          echo "‚úÖ Dockerfile found at ${{ inputs.dockerfile }}"

      # ‚úÖ Docker login step (Fixed missing secrets issue)
      - name: Docker Login
        if: ${{ matrix.step == 'docker-login' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Check Docker login status
        if: ${{ matrix.step == 'docker-login' }}
        run: |
          echo "‚úÖ Docker login successful!"
          docker info

      # ‚úÖ Set up Docker Buildx
      - name: Set up Docker Buildx
        if: ${{ matrix.step == 'docker-build-push' }}
        uses: docker/setup-buildx-action@v2

      # ‚úÖ Extract metadata for Docker image tagging
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: ${{ matrix.step == 'docker-build-push' }}
        uses: docker/metadata-action@v3
        with:
          images: ${{ inputs.dockerhub_repo }}

      # ‚úÖ Verify Docker context and BuildKit before building
      - name: Verify Docker Context & BuildKit
        if: ${{ matrix.step == 'docker-build-push' }}
        run: |
          echo "üõ†Ô∏è Verifying Docker Context"
          docker context ls
          docker context use default
          echo "‚úÖ Docker context set to default"

          echo "üîß Checking BuildKit Status"
          if [[ "$(docker buildx inspect default | grep -c 'Driver: docker-container')" -eq 0 ]]; then
            echo "üîÑ Enabling BuildKit"
            export DOCKER_BUILDKIT=1
          fi
          echo "‚úÖ BuildKit enabled"

      # ‚úÖ Build and Push Docker Image
      - name: Build and Push Docker image
        if: ${{ matrix.step == 'docker-build-push' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ github.workspace }}/${{ inputs.dockerfile || 'Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  validate-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Check if environment variables are set
        run: |
          echo "‚úÖ Validating Environment Variables"
          echo "DOCKERHUB_USERNAME = ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "DOCKERHUB_PASSWORD = ${{ secrets.DOCKERHUB_PASSWORD }}"
